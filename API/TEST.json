{
	"info": {
		"_postman_id": "ba466eb7-9e42-4b94-b299-7e4588b84055",
		"name": "TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Hello.... This is Test Script\");",
							"",
							"let urlvar = pm.variables.get(\"url\");",
							"console.log(\"value for URL variable is :-\"+ urlvar);",
							"",
							"//assertions",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Running Pre-request Script from request\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/users/2?name=unknown",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users",
						"2"
					],
					"query": [
						{
							"key": "name",
							"value": "unknown"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API responds within the expected treshhold\", () => {",
							"  // set the response time in milliseconds",
							"  const expectedTimeInMilliseconds = 500;",
							"",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(",
							"    expectedTimeInMilliseconds + 1,",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`",
							"  );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{endpoint}}",
					"host": [
						"{{url}}{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"sakshi\",\n    \"job\": \"automation\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/users/2",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API responds within the expected treshhold\", () => {",
							"  // set the response time in milliseconds",
							"  const expectedTimeInMilliseconds = 500;",
							"",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(",
							"    expectedTimeInMilliseconds + 1,",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`",
							"  );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}api/users/2",
					"host": [
						"{{url}}api"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"Running Pre-request Script before request in (TEST Collection)\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://reqres.in/",
			"type": "string"
		}
	]
}